import Crypto from './crypto';
const crypto = require('crypto');

// The validator should sit on the smart device.
// The signer needs to create trust for the backend. This is done via a blinded
// secret generated by the smart device.
export default class Validator {
  constructor() {
    // generate private and public keys
    const { privateKey, publicKey } = crypto.generateKeyPairSync('ec', {
      namedCurve: 'sect239k1',
      publicKeyEncoding:  { type: 'spki', format: 'pem' },
      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }
    });

    this.privateKey = privateKey;
    this.publicKey = publicKey;

    // we store a nonce for freshness
    this.nonce = null;
  }

  // the message that arrives to the validator should be signed, moreover a
  // nonce has to be added for freshness
  sign(message) {
    // generate and store the new nonce
    this.nonce = new Crypto().getNonce();

    // to sign the message, together with the nonce
    const toSign = message + '|' + this.nonce;

    // get the signature
    const signature = new Crypto().sign(
      new Crypto().hash(toSign),
      this.privateKey
    );
    return signature;
  }

  // export public key
  exportKey() {
    return this.publicKey;
  }

  // export nonce
  exportNonce() {
    return this.nonce;
  }
}
